/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;


import BusinessLogic.CustomRenderer;
import BusinessLogic.FieldLevelValidation;
import BusinessLogic.Patient;
import BusinessLogic.Person;
import BusinessLogic.PersonDirectory;
import BusinessLogic.VerifyLevel;
import BusinessLogic.VitalSign;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Paint;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Piyush
 */
public class ViewPersonDetailsJPanel extends javax.swing.JPanel {

    private Person person;
    private JPanel userProcessContainer;
    private Patient patient;
    private ManagePersonJPanel managePersonJPanel;
    private VitalSign vs;
    public ViewPersonDetailsJPanel(Person person, Patient patient, JPanel userProcessContainer, VitalSign vs, ManagePersonJPanel managePersonJPanel) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.patient = patient;
        this.managePersonJPanel = managePersonJPanel;
        this.vs = vs;
        this.person = person;
        populateFields();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        personIDTxtField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        personNameTxtField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        personAgeTxtField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        personGenderTxtField = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        vitalSignTable = new javax.swing.JTable();
        viewPatientBttn = new javax.swing.JButton();
        viewGraphBtn = new javax.swing.JButton();
        viewBloodPressureGraph = new javax.swing.JButton();
        viewHeartRateGraph = new javax.swing.JButton();
        viewWeightInPoundsGraph = new javax.swing.JButton();
        viewRespiratoryRateGraph = new javax.swing.JButton();

        jLabel5.setText("Person ID");

        personIDTxtField.setEditable(false);
        personIDTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personIDTxtFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("Person Name");

        personNameTxtField.setEditable(false);
        personNameTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personNameTxtFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("Person Age");

        personAgeTxtField.setEditable(false);
        personAgeTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personAgeTxtFieldActionPerformed(evt);
            }
        });

        jLabel8.setText("Person Gender");

        personGenderTxtField.setEditable(false);
        personGenderTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personGenderTxtFieldActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.setEnabled(false);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        vitalSignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Blood Pressure", "Heart Rate", "Respiratory Rate", "Weight in Pounds", "Datetime", "Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vitalSignTable);

        viewPatientBttn.setText("View Patient Vital Sign Detais");
        viewPatientBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPatientBttnActionPerformed(evt);
            }
        });

        viewGraphBtn.setText("Select Row and View Graph");
        viewGraphBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGraphBtnActionPerformed(evt);
            }
        });

        viewBloodPressureGraph.setText("View Blood Pressure Graph");
        viewBloodPressureGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBloodPressureGraphActionPerformed(evt);
            }
        });

        viewHeartRateGraph.setText("View Heart Rate Graph");
        viewHeartRateGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHeartRateGraphActionPerformed(evt);
            }
        });

        viewWeightInPoundsGraph.setText("View Weight In Pounds Graph");
        viewWeightInPoundsGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewWeightInPoundsGraphActionPerformed(evt);
            }
        });

        viewRespiratoryRateGraph.setText("View Respiratory Rate Graph");
        viewRespiratoryRateGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRespiratoryRateGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addGap(269, 269, 269)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(personGenderTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                            .addComponent(personAgeTxtField)
                            .addComponent(personIDTxtField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(personNameTxtField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(viewHeartRateGraph)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewWeightInPoundsGraph))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(viewBloodPressureGraph)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(viewRespiratoryRateGraph)))
                                .addGap(15, 15, 15)))))
                .addGap(73, 73, 73))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewGraphBtn)
                            .addComponent(viewPatientBttn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(saveBtn)
                        .addGap(187, 187, 187)
                        .addComponent(updateBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(personIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(personNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(personAgeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(personGenderTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(updateBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(viewPatientBttn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewGraphBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewBloodPressureGraph)
                    .addComponent(viewRespiratoryRateGraph))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewWeightInPoundsGraph)
                    .addComponent(viewHeartRateGraph))
                .addGap(14, 14, 14)
                .addComponent(backBtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void personIDTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personIDTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personIDTxtFieldActionPerformed

    private void personNameTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personNameTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personNameTxtFieldActionPerformed

    private void personAgeTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personAgeTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personAgeTxtFieldActionPerformed

    private void personGenderTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personGenderTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personGenderTxtFieldActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
    personNameTxtField.setEditable(true);
    personAgeTxtField.setEditable(true);
    personGenderTxtField.setEditable(true);
    updateBtn.setEnabled(false);
    saveBtn.setEnabled(true);
    }//GEN-LAST:event_updateBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
    
    FieldLevelValidation fieldLevelValidation = new FieldLevelValidation();
    
    int counter = 0;
    if(personNameTxtField.getText().trim().isEmpty()||
                personAgeTxtField.getText().trim().isEmpty()||
                    personGenderTxtField.getText().trim().isEmpty())
    {
        JOptionPane.showMessageDialog(null, "One or More Fields are Blank!");
    }
    else{
       
        
    String personName = personNameTxtField.getText().trim();
    boolean isPersonNameValid = fieldLevelValidation.checkPersonNameField(personName);
    if(isPersonNameValid==true)
    {
        counter++;
    }
    else
        JOptionPane.showMessageDialog(null, "Person Name Invalid");
    
    String personAge = personAgeTxtField.getText().trim();
    boolean isPersoAgeValid = fieldLevelValidation.checkPersonAgeField(personAge);
    if(isPersoAgeValid==true)
    {
        counter++;
    }
    else
        JOptionPane.showMessageDialog(null, "Person Age Invalid");
    
    String personGender = personGenderTxtField.getText().trim();
    boolean isPersoGenderValid = fieldLevelValidation.checkPersonGenderField(personGender);
    if(isPersoGenderValid==true)
    {
        counter++;
    }
    else
        JOptionPane.showMessageDialog(null, "Person Gender Invalid");
    }
    
    if(counter == 4)
    {    
    person.setPersonName(personNameTxtField.getText());
    person.setPersonAge(Integer.parseInt(personAgeTxtField.getText()));
    person.setPersonGender(personGenderTxtField.getText());
    saveBtn.setEnabled(false);
    updateBtn.setEnabled(true);
    personNameTxtField.setEditable(false);
    personAgeTxtField.setEditable(false);
    personGenderTxtField.setEditable(false);
    JOptionPane.showMessageDialog(null, "Person Profile Updated Succfully");
    }//GEN-LAST:event_saveBtnActionPerformed
    }
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
    userProcessContainer.remove(this);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewPatientBttnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPatientBttnActionPerformed
    int selectedRow = vitalSignTable.getSelectedRow();
    if(selectedRow>=0){
        VitalSign vitalSign = (VitalSign)vitalSignTable.getValueAt(selectedRow, 0);
        ViewVitalSignDetailsJPanel pane1 = new ViewVitalSignDetailsJPanel(person,patient,userProcessContainer,vitalSign,this);
        userProcessContainer.add("manageVitalSignPerson",pane1);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }
    else{
        JOptionPane.showMessageDialog(null, "Kindly select a row");
    }
    }//GEN-LAST:event_viewPatientBttnActionPerformed

    private void viewGraphBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGraphBtnActionPerformed
    if(person.getPatient()==null){
      JOptionPane.showMessageDialog(null, "Cannot Display Bar Graph as no Vital Sign details available");  
    }
    else{
        int selectedRow = vitalSignTable.getSelectedRow();
        if(selectedRow>=0){
        VitalSign vitalSign = (VitalSign)vitalSignTable.getValueAt(selectedRow, 0);
        
        String symbollicBloodPressure = String.valueOf(vitalSign.getSymbolicBloodPressure());
        String heartRate = String.valueOf(vitalSign.getHeartRate());
        String respiratoryRate = String.valueOf(vitalSign.getRespiratoryRate());
        String weightInPounds = String.valueOf(vitalSign.getWeightInpounds());
        String date = String.valueOf(vitalSign.getDateTimeStamp());
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(Integer.parseInt(symbollicBloodPressure), "Values", "Blood Pressure");
        dataset.setValue(Integer.parseInt(heartRate), "Values", "Heart Rate");
        dataset.setValue(Integer.parseInt(respiratoryRate), "Values", "Respiratory Rate");
        dataset.setValue(Float.parseFloat(weightInPounds), "Values", "Weight In Pounds");
    
        JFreeChart chart = ChartFactory.createBarChart3D("Vital Sign Graph","Parameters","Values",dataset,PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.YELLOW);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame = new ChartFrame("Chart for displaying Vital Signs", chart);
        frame.setVisible(true);
        frame.setSize(750,750);
    }
        else{
        JOptionPane.showMessageDialog(null, "Kindly select a row");
    }
    }
    }//GEN-LAST:event_viewGraphBtnActionPerformed

    private void viewBloodPressureGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBloodPressureGraphActionPerformed
    if(person.getPatient()==null){
      JOptionPane.showMessageDialog(null, "Cannot Display Bar Graph as no Vital Sign details available");  
    }
    else{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int rowCount = vitalSignTable.getRowCount();
        String[] bloodPressureArray = new String[rowCount];
        String[] timeStamp = new String[rowCount];
        for(int i=0;i<vitalSignTable.getRowCount();i++){
            bloodPressureArray[i] = String.valueOf(vitalSignTable.getValueAt(i,1));
            timeStamp[i] = String.valueOf(vitalSignTable.getValueAt(i,5));
        }
        
        for(int k=0;k<bloodPressureArray.length;k++){
        dataset.setValue(Integer.parseInt(bloodPressureArray[k]), "Values", timeStamp[k]);
    }
       

      
        JFreeChart chart = ChartFactory.createBarChart3D("Vital Sign Graph","Parameters","Values",dataset,PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.YELLOW);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame = new ChartFrame("Chart for displaying Vital Signs", chart);
        frame.setVisible(true);
        frame.setSize(900,900);
    
    }
    
    }//GEN-LAST:event_viewBloodPressureGraphActionPerformed

    private void viewRespiratoryRateGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRespiratoryRateGraphActionPerformed
    if(person.getPatient()==null){
      JOptionPane.showMessageDialog(null, "Cannot Display Bar Graph as no Vital Sign details available");  
    }
    else{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int rowCount = vitalSignTable.getRowCount();
        String[] respiratoryRateArray = new String[rowCount];
        String[] timeStamp = new String[rowCount];
        for(int i=0;i<vitalSignTable.getRowCount();i++){
            respiratoryRateArray[i] = String.valueOf(vitalSignTable.getValueAt(i,3));
            timeStamp[i] = String.valueOf(vitalSignTable.getValueAt(i,5));
        }
        
        for(int k=0;k<respiratoryRateArray.length;k++){
        dataset.setValue(Integer.parseInt(respiratoryRateArray[k]), "Values", timeStamp[k]);
    }
        JFreeChart chart = ChartFactory.createBarChart3D("Vital Sign Graph","Parameters","Values",dataset,PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.YELLOW);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame = new ChartFrame("Chart for displaying Vital Signs", chart);
        frame.setVisible(true);
        frame.setSize(900,900);
    
    }
    }//GEN-LAST:event_viewRespiratoryRateGraphActionPerformed

    private void viewHeartRateGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHeartRateGraphActionPerformed
    if(person.getPatient()==null){
      JOptionPane.showMessageDialog(null, "Cannot Display Bar Graph as no Vital Sign details available");  
    }
    else{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int rowCount = vitalSignTable.getRowCount();
        String[] heartRateArray = new String[rowCount];
        String[] timeStamp = new String[rowCount];
        for(int i=0;i<vitalSignTable.getRowCount();i++){
            heartRateArray[i] = String.valueOf(vitalSignTable.getValueAt(i,2));
            timeStamp[i] = String.valueOf(vitalSignTable.getValueAt(i,5));
        }
        
        for(int k=0;k<heartRateArray.length;k++){
        dataset.setValue(Integer.parseInt(heartRateArray[k]), "Values", timeStamp[k]);
    }
        JFreeChart chart = ChartFactory.createBarChart3D("Vital Sign Graph","Parameters","Values",dataset,PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.YELLOW);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame = new ChartFrame("Chart for displaying Vital Signs", chart);
        frame.setVisible(true);
        frame.setSize(900,900);
    
    }
    }//GEN-LAST:event_viewHeartRateGraphActionPerformed

    private void viewWeightInPoundsGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewWeightInPoundsGraphActionPerformed
    if(person.getPatient()==null){
      JOptionPane.showMessageDialog(null, "Cannot Display Bar Graph as no Vital Sign details available");  
    }
    else{
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int rowCount = vitalSignTable.getRowCount();
        String[] weightInPounds = new String[rowCount];
        String[] timeStamp = new String[rowCount];
        for(int i=0;i<vitalSignTable.getRowCount();i++){
            weightInPounds[i] = String.valueOf(vitalSignTable.getValueAt(i,4));
            timeStamp[i] = String.valueOf(vitalSignTable.getValueAt(i,5));
        }
        
        for(int k=0;k<weightInPounds.length;k++){
        dataset.setValue(Float.parseFloat(weightInPounds[k]), "Values", timeStamp[k]);
    }
        JFreeChart chart = ChartFactory.createBarChart3D("Vital Sign Graph","Parameters","Values",dataset,PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.YELLOW);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame = new ChartFrame("Chart for displaying Vital Signs", chart);
        frame.setVisible(true);
        frame.setSize(900,900);
    
    }
    }//GEN-LAST:event_viewWeightInPoundsGraphActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField personAgeTxtField;
    private javax.swing.JTextField personGenderTxtField;
    private javax.swing.JTextField personIDTxtField;
    private javax.swing.JTextField personNameTxtField;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton viewBloodPressureGraph;
    private javax.swing.JButton viewGraphBtn;
    private javax.swing.JButton viewHeartRateGraph;
    private javax.swing.JButton viewPatientBttn;
    private javax.swing.JButton viewRespiratoryRateGraph;
    private javax.swing.JButton viewWeightInPoundsGraph;
    private javax.swing.JTable vitalSignTable;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
    DefaultTableModel dtm = (DefaultTableModel)vitalSignTable.getModel();    
    dtm.setRowCount(0);
    
    if(person.getPatient()==null){
    
    Object row[] = new Object[7];
    
    row[0]="No Patient created yet.";
    row[1]="No Patient created yet.";
    row[2]="No Patient created yet.";
    row[3]="No Patient created yet.";
    row[4]="No Patient created yet.";
    row[5]="No Patient created yet.";
    dtm.addRow(row);
    }
    else{
    for(VitalSign vs : person.getPatient().getVitalSignHistory()){
     Object row[] = new Object[7];
     
        row[0]=vs;
        row[1]=vs.getSymbolicBloodPressure();
        row[2]=vs.getHeartRate();
        row[3]=vs.getRespiratoryRate();
        row[4]=vs.getWeightInpounds();
        row[5]=vs.getDateTimeStamp();
        VerifyLevel verifyLevel = new VerifyLevel(vs,person);
        row[6]=verifyLevel.verifyLevelNormalOrAbnormal();
         dtm.addRow(row);
        }
       
    }    
    }
    

    private void populateFields() {
    personIDTxtField.setText(String.valueOf(person.getPersonID()));
    personNameTxtField.setText(person.getPersonName());
    personAgeTxtField.setText(String.valueOf(person.getPersonAge()));
    personGenderTxtField.setText(person.getPersonGender());
    
    }
}
