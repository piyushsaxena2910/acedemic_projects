/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import BusinessLogic.Patient;
import BusinessLogic.Person;
import BusinessLogic.PersonDirectory;
import BusinessLogic.VitalSign;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piyush
 */
public class ManagePersonJPanel extends javax.swing.JPanel {

    private PersonDirectory personDirectory;
    private JPanel userProcessContainer;
    private Patient patient;
    private VitalSign vs;
    public ManagePersonJPanel(PersonDirectory personDirectory, Patient patient, VitalSign vs, JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.personDirectory = personDirectory;
        this.patient = patient;
        this.vs = vs;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        personDisplayTable = new javax.swing.JTable();
        searchPersonIDTxtField = new javax.swing.JTextField();
        searchPersonIDBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        searchPerson = new javax.swing.JButton();

        personDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person ID", "Person Name", "Person Age", "Person Gender"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(personDisplayTable);

        searchPersonIDBtn.setText("Search");
        searchPersonIDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPersonIDBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchPerson.setText("Enter Person ID and click here");
        searchPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPersonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBtn))
                .addContainerGap(198, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchPersonIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchPersonIDBtn)
                        .addGap(86, 86, 86))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchPersonIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPerson))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(searchPersonIDBtn)
                .addGap(1, 1, 1)
                .addComponent(backBtn)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
    userProcessContainer.remove(this);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchPersonIDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPersonIDBtnActionPerformed
    int selectedRow = personDisplayTable.getSelectedRow();
    if(selectedRow>=0){
        Person person = (Person) personDisplayTable.getValueAt(selectedRow, 0);
        ViewPersonDetailsJPanel pane1 = new ViewPersonDetailsJPanel(person,patient,userProcessContainer,vs,this);
        userProcessContainer.add("managePerson",pane1);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }
    else{
        JOptionPane.showMessageDialog(null, "Kindly select a row");
    }
    }//GEN-LAST:event_searchPersonIDBtnActionPerformed

    private void searchPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPersonActionPerformed
    String searchInput = searchPersonIDTxtField.getText();
    Person person = personDirectory.searchAccount(searchInput);
    ViewPersonDetailsJPanel pane1 = new ViewPersonDetailsJPanel(person,patient,userProcessContainer,vs,this);
    userProcessContainer.add("viewDetails",pane1);
    CardLayout layout = (CardLayout)userProcessContainer.getLayout();
    layout.next(userProcessContainer);
    }//GEN-LAST:event_searchPersonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable personDisplayTable;
    private javax.swing.JButton searchPerson;
    private javax.swing.JButton searchPersonIDBtn;
    private javax.swing.JTextField searchPersonIDTxtField;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
    DefaultTableModel dtm = (DefaultTableModel)personDisplayTable.getModel();    
    dtm.setRowCount(0);
    for(Person person : personDirectory.getPersonList())
    {
        Object row[] = new Object[4];
        row[0]=person;
        row[1]=person.getPersonName();
        row[2]=person.getPersonAge();
        row[3]=person.getPersonGender();
        dtm.addRow(row);
    }    
    }
    }

