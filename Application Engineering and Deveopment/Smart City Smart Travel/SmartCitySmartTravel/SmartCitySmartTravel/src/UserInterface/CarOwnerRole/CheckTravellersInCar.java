/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CarOwnerRole;

import Business.Car.Car;
import Business.CarOwner.CarOwner;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.CarOwnerOrganization;
import Business.Organization.Organization;
import Business.Organization.TravelSeekerOrganization;
import Business.TravelSeeker.TravelSeeker;
import Business.Traveller.Traveller;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CarPoolWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piyush
 */
public class CheckTravellersInCar extends javax.swing.JPanel {

    /**
     * Creates new form CheckTravellersInCar
     */
    private JPanel userProcessContainer;
    private CarOwnerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public CheckTravellersInCar(JPanel userProcessContainer, UserAccount account, CarOwnerOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        populateAvailableCarList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        requestFromOtherTravelSeekersTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();

        requestFromOtherTravelSeekersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Car Owner", "Travellers Currently Car Pooling", "Travellers who Unlocked the Car", "Receiver Current Location", "Receiver Destination", "Car Booked From", "Car Booked Until", "Car Capacity Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestFromOtherTravelSeekersTable);
        if (requestFromOtherTravelSeekersTable.getColumnModel().getColumnCount() > 0) {
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(0).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(1).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(2).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(3).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(4).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(5).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(6).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(7).setResizable(false);
        }

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(backJButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(backJButton)
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable requestFromOtherTravelSeekersTable;
    // End of variables declaration//GEN-END:variables
public void populateAvailableCarList() {
        DefaultTableModel model = (DefaultTableModel) requestFromOtherTravelSeekersTable.getModel();
        model.setRowCount(0);
        Traveller travellerWhoUnlocked = null;
        TravelSeeker travelSeekerReceiverWithCar = null;
        Traveller receiverTravellerWithCar = null;
        
        CarOwner co = (CarOwner)this.userAccount.getTraveller();
        Car car = co.getCar();
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof TravelSeekerOrganization){
                org = organization;
                break;
            }
        }
        
        Car carWithTravelSeeker = null;
        for (WorkRequest request : org.getWorkQueue().getWorkRequestList()){
            CarPoolWorkRequest carPoolRequest = (CarPoolWorkRequest)request;
            receiverTravellerWithCar = carPoolRequest.getTravellerWithCar();
            travelSeekerReceiverWithCar = (TravelSeeker)receiverTravellerWithCar;
            carWithTravelSeeker = travelSeekerReceiverWithCar.getCar();
        }
         if(car==carWithTravelSeeker){
                travellerWhoUnlocked = receiverTravellerWithCar;
            
            Object[] row = new Object[8];
            row[0] = this.userAccount.getTraveller();
            row[1] = getAllUsersWithCar(car) == null ? "No Traveller car pooling in this car yet." : getAllUsersWithCar(car);
            row[2] = travellerWhoUnlocked;
            row[3] = travelSeekerReceiverWithCar.getLocation();
            row[4] = travelSeekerReceiverWithCar.getDestinationLocation();
            row[5] = travelSeekerReceiverWithCar.getCarNeededFrom() + ":00";
            row[6] = travelSeekerReceiverWithCar.getCarNeededUntil() + ":00";
            row[7] = travelSeekerReceiverWithCar.getCar().getCapacity();
            model.addRow(row);
               
         }
        
            else{
                JOptionPane.showMessageDialog(null, "You car has not been Unlocked yet!");
            }
        }
        


    public Traveller getCarOwner(Traveller receiverTravellerWithCar) {
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof CarOwnerOrganization){
                for (WorkRequest req : org.getWorkQueue().getWorkRequestList()){
                    if(req.getSender().getTraveller()==receiverTravellerWithCar){
                        return req.getReceiver().getTraveller();
                    }
                }
            }
        }
        return null;
    }
    
    public String getAllUsersWithCar(Car car){
        String nameOfUsersWithCar = "";
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof TravelSeekerOrganization){
                for (WorkRequest req : org.getWorkQueue().getWorkRequestList()){
                    Traveller tr = req.getReceiver().getTraveller();
                    TravelSeeker ts = (TravelSeeker)tr;
                    
                    if(ts.getCar()==car){
                        if(nameOfUsersWithCar.contains(String.valueOf(tr))){
                            
                        }
                        else{
                        nameOfUsersWithCar = nameOfUsersWithCar + " " + tr + " ";
                        }
                    }
                    if(req.getSender()!=null){
                    Traveller trSender = req.getSender().getTraveller();
                    TravelSeeker tsSender = (TravelSeeker)trSender;
                    
                    if(tsSender.getCar()==car){
                        nameOfUsersWithCar = nameOfUsersWithCar + " " + trSender + " ";
                    }
                    }
                }
            }
        }
        return nameOfUsersWithCar;
    }
    
}
