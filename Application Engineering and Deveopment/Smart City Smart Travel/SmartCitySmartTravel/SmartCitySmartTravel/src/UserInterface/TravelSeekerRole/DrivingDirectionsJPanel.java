/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelSeekerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Maps.DistanceAndTimeCalculation;
import Business.Network.Network;
import Business.Organization.TravelSeekerOrganization;
import Business.TravelSeeker.TravelSeeker;
import Business.Traveller.Traveller;
import Business.UserAccount.UserAccount;
import FieldLevelValidation.FieldLevelValidation;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piyush
 */
public class DrivingDirectionsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DrivingDirectionsAndCheckoutJPanel
     */
    private JPanel userProcessContainer;
    private TravelSeekerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public DrivingDirectionsJPanel(JPanel userProcessContainer, UserAccount userAccount, TravelSeekerOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        
        Traveller t = this.userAccount.getTraveller();
        TravelSeeker ts = (TravelSeeker)t;
        
        destinationTXTField.setText(ts.getDestinationLocation());
        currentLocationTXTField.setText(ts.getCar().getLoction());
        
        populateDirectionsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        directionsJTable = new javax.swing.JTable();
        destinationTXTField = new javax.swing.JTextField();
        currentLocationTXTField = new javax.swing.JTextField();
        getDirectionBTN = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        jLabel1.setText("Your Destination is : ");

        jLabel2.setText("Enter Current Location : ");

        jLabel3.setText("Driving Directions");

        directionsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Direction", "For Distance", "For Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(directionsJTable);
        if (directionsJTable.getColumnModel().getColumnCount() > 0) {
            directionsJTable.getColumnModel().getColumn(1).setResizable(false);
            directionsJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        destinationTXTField.setEditable(false);

        getDirectionBTN.setText("Get Directions!");
        getDirectionBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDirectionBTNActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(destinationTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(currentLocationTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(101, 101, 101)
                                        .addComponent(getDirectionBTN))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(backJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(261, 261, 261)
                                .addComponent(jLabel3)))
                        .addGap(167, 167, 167)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(destinationTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(currentLocationTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getDirectionBTN))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(backJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getDirectionBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDirectionBTNActionPerformed
        FieldLevelValidation flv = new FieldLevelValidation();
        
        if(currentLocationTXTField.getText().equals(""))
            JOptionPane.showMessageDialog(null, "Current Location Field is Blank!");
        else if(!flv.validateLocationField(currentLocationTXTField.getText())){
            JOptionPane.showMessageDialog(null, "Invalid Current Location. Please Enter The Complete Address.");
        }
        else{
        populateDirectionsTable();
        }
    }//GEN-LAST:event_getDirectionBTNActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField currentLocationTXTField;
    private javax.swing.JTextField destinationTXTField;
    private javax.swing.JTable directionsJTable;
    private javax.swing.JButton getDirectionBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void populateDirectionsTable() {
        DefaultTableModel model = (DefaultTableModel) directionsJTable.getModel();       
        model.setRowCount(0);
        
        DistanceAndTimeCalculation datc = new DistanceAndTimeCalculation();
        String fromLocation = currentLocationTXTField.getText();
        String toLocation = destinationTXTField.getText();
        ArrayList<String> direction = datc.getDirections(fromLocation,toLocation);
        ArrayList<String> distance = datc.getDuration(fromLocation,toLocation);
        ArrayList<String> duration = datc.getDistance(fromLocation,toLocation);
        
        for(int i = 0; i < direction.size(); i++){
        Object[] row = new Object[3];
        String directionString = (direction.get(i).replace("</b>", " ")).replace("<b>", " ");
        if(directionString.contains("<")){
        int indexOfDivCharacter = directionString.indexOf("<");
        directionString = directionString.substring(0, indexOfDivCharacter);
        row[0] = directionString;
        }
        else
        row[0] = directionString;
        row[1] = duration.get(i);
        row[2] = distance.get(i);
        model.addRow(row);
    }
    }
}
