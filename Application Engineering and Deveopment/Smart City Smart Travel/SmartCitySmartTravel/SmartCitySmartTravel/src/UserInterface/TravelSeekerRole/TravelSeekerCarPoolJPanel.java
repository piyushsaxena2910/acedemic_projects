/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelSeekerRole;

import Business.Car.Car;
import Business.Enterprise.Enterprise;
import Business.Organization.CarOwnerOrganization;
import Business.Organization.Organization;
import Business.Organization.TravelSeekerOrganization;
import Business.TravelSeeker.TravelSeeker;
import Business.Traveller.Traveller;
import Business.Traveller.TravellerDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CarPoolWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piyush
 */
public class TravelSeekerCarPoolJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TravelSeekerCarPoolJPanel
     */
    private JPanel userProcessContainer;
    private TravelSeekerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private TravelSeekerWorkAreaJPanel tsqajp;
    public TravelSeekerCarPoolJPanel(JPanel userProcessContainer, UserAccount userAccount, TravelSeekerOrganization organization, Enterprise enterprise,  TravelSeekerWorkAreaJPanel tsqajp) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.tsqajp = tsqajp;
        populateAvailableCarList();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        requestFromOtherTravelSeekersTable = new javax.swing.JTable();
        requestCarJButton = new javax.swing.JButton();
        travelSeekerNameTXTField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();

        requestFromOtherTravelSeekersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Car Owner", "Travellers Currently Car Pooling", "Travellers who Unlocked the Car", "Receiver Current Location", "Receiver Destination Location", "Car Booked From", "Car Booked Until", "Request Status", "Car Capacity Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestFromOtherTravelSeekersTable);
        if (requestFromOtherTravelSeekersTable.getColumnModel().getColumnCount() > 0) {
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(0).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(1).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(2).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(3).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(4).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(5).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(6).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(7).setResizable(false);
            requestFromOtherTravelSeekersTable.getColumnModel().getColumn(8).setResizable(false);
        }

        requestCarJButton.setText("Enter Traveller Name who currently has the car and Click here");
        requestCarJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestCarJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1338, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addComponent(travelSeekerNameTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(138, 138, 138)
                        .addComponent(requestCarJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(backJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(backJButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(requestCarJButton)
                            .addComponent(travelSeekerNameTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(81, 81, 81))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestCarJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestCarJButtonActionPerformed

        if(travelSeekerNameTXTField.getText().equals("")){
                    JOptionPane.showMessageDialog(null, "Enter the Traveller name and then click here");
        }
        else {
        String nameOfTravelSeeker = travelSeekerNameTXTField.getText();
        Traveller travellerFound = null;
        int counter = 0;
        boolean carOwnerFound = false;

        for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(organization instanceof TravelSeekerOrganization){
                for(Traveller tr : organization.getTravellerDirectory().getTravellerList()){
                    try{
                    TravelSeeker ts = (TravelSeeker)tr;
                    
                    if(ts.getCar()!=null && tr.getName().equals(nameOfTravelSeeker)){
                        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
                            request = (CarPoolWorkRequest)request;
                            TravelSeeker travelSeekerReceiver = (TravelSeeker)request.getReceiver().getTraveller();
                            if(travelSeekerReceiver.getName().equals(ts.getName())){
                            travellerFound = tr;
                            JOptionPane.showMessageDialog(null, "Traveller exists in the table");
                            carOwnerFound = true;
                            break; 
                            }
                        }
                        
                }
                }
                    catch(Exception e){
                        JOptionPane.showMessageDialog(null, "An error occured in calculating the time and distance from your address to the current address of the car. Kindly enter an even more specific address.");
                        return;
                    }
                }
                    if(counter==organization.getTravellerDirectory().getTravellerList().size() || travellerFound == null){
                        JOptionPane.showMessageDialog(null, "Invald Input! Enter a Traveller name who unlocked a car!");
                    }
                }
            }
        
        if(carOwnerFound){
            TravelSeeker tsWithCar = (TravelSeeker)travellerFound;

            TravelSeeker WithoutCar = (TravelSeeker)this.userAccount.getTraveller();

            if(tsWithCar.getCar().getCapacity()<1){
                JOptionPane.showMessageDialog(null, "Car capacity is Zero! Can't access this Car!!");
                return;
            }
            else if(WithoutCar.getCarNeededFrom()<tsWithCar.getCarNeededFrom()){
                JOptionPane.showMessageDialog(null, "Car is not available from the time you need it! Please modify your search");
                return;
            }
            else if(WithoutCar.getCarNeededUntil()>tsWithCar.getCarNeededUntil()){
                JOptionPane.showMessageDialog(null, "Car is not available until the time you need it! Please modify your search");
                return;
            }
            else{
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                userProcessContainer.add("TravelSeekerCarPoolRequestSetMessageJPanel", new TravelSeekerCarPoolRequestSetMessageJPanel(userProcessContainer, userAccount, enterprise,(TravelSeeker)travellerFound,this));
                layout.next(userProcessContainer);
            }
        }
        }
    }//GEN-LAST:event_requestCarJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        tsqajp.populateCarYouAreTravellingWithTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton requestCarJButton;
    private javax.swing.JTable requestFromOtherTravelSeekersTable;
    private javax.swing.JTextField travelSeekerNameTXTField;
    // End of variables declaration//GEN-END:variables


public void populateAvailableCarList() {
        DefaultTableModel model = (DefaultTableModel) requestFromOtherTravelSeekersTable.getModel();
        model.setRowCount(0);
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof TravelSeekerOrganization){
                org = organization;
                break;
            }
        }
        for (WorkRequest request : org.getWorkQueue().getWorkRequestList()){
            if(request instanceof CarPoolWorkRequest){
            CarPoolWorkRequest carPoolRequest = (CarPoolWorkRequest)request;
            Traveller receiverTravellerWithCar = carPoolRequest.getTravellerWithCar();
            TravelSeeker travelSeekerReceiverWithCar = (TravelSeeker)receiverTravellerWithCar;
            Car car = travelSeekerReceiverWithCar.getCar();
            
            Object[] row = new Object[9];
            row[0] = getCarOwner(receiverTravellerWithCar) == null ? "" : getCarOwner(receiverTravellerWithCar);
            row[1] = getAllUsersWithCar(car,carPoolRequest) == null ? "No Traveller car pooling in this car yet." : getAllUsersWithCar(car,carPoolRequest);
            row[2] = String.valueOf(((CarPoolWorkRequest)request).getTravellerWithCar());
            row[3] = travelSeekerReceiverWithCar.getLocation();
            row[4] = travelSeekerReceiverWithCar.getDestinationLocation();
            row[5] = travelSeekerReceiverWithCar.getCarNeededFrom() + ":00";
            row[6] = travelSeekerReceiverWithCar.getCarNeededUntil() + ":00";
            String result = ((CarPoolWorkRequest) request).getStatus()== null ? "" : ((CarPoolWorkRequest) request).getStatus();
            row[7] = result == null ? "Waiting" : result;
            row[8] = travelSeekerReceiverWithCar.getCar().getCapacity();
            model.addRow(row);
    }
        }
}

    public Traveller getCarOwner(Traveller receiverTravellerWithCar) {
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof CarOwnerOrganization){
                for (WorkRequest req : org.getWorkQueue().getWorkRequestList()){
                    if(req.getSender().getTraveller()==receiverTravellerWithCar){
                        return req.getReceiver().getTraveller();
                    }
                }
            }
        }
        return null;
    }
    
    public String getAllUsersWithCar(Car car, CarPoolWorkRequest carPoolRequest){
        String nameOfUsersWithCar = "";
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof TravelSeekerOrganization){
                for (WorkRequest req : org.getWorkQueue().getWorkRequestList()){
                    Traveller tr = req.getReceiver().getTraveller();
                    TravelSeeker ts = (TravelSeeker)tr;
                    
                    if(ts.getCar()==car && (CarPoolWorkRequest)req == carPoolRequest){
                        nameOfUsersWithCar = nameOfUsersWithCar + " " + tr + " ";
                    }
                    if(req.getSender()!=null && (CarPoolWorkRequest)req == carPoolRequest){
                    Traveller trSender = req.getSender().getTraveller();
                    TravelSeeker tsSender = (TravelSeeker)trSender;
                    
                    if(tsSender.getCar()==car){
                        nameOfUsersWithCar = nameOfUsersWithCar + " " + trSender + " ";
                    }
                    }
                }
            }
        }
        return nameOfUsersWithCar;
    }
}
