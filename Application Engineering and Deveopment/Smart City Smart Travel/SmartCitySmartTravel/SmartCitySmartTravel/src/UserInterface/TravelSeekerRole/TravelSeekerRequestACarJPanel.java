/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelSeekerRole;

import Business.CarOwner.CarOwner;
import Business.Enterprise.Enterprise;
import Business.Maps.DistanceAndTimeCalculation;
import Business.Organization.CarOwnerOrganization;
import Business.Organization.Organization;
import Business.Organization.TravelSeekerOrganization;
import Business.TravelSeeker.TravelSeeker;
import Business.Traveller.Traveller;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CarUnlockWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piyush
 */
public class TravelSeekerRequestACarJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    private JPanel userProcessContainer;
    private TravelSeekerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private TravelSeekerWorkAreaJPanel tsqajp;
    public TravelSeekerRequestACarJPanel(JPanel userProcessContainer, UserAccount userAccount, TravelSeekerOrganization organization, Enterprise enterprise, TravelSeekerWorkAreaJPanel tsqajp) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.tsqajp = tsqajp;
        populateAvailableCarList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        carAvailableTable = new javax.swing.JTable();
        requestCarJButton = new javax.swing.JButton();
        carOwnerNameTXTField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        viewGraphBTN = new javax.swing.JButton();

        carAvailableTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Car Owner Name", "Car License Plate Number", "Car Location", "Car Available From", "Car Available To", "Capacity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(carAvailableTable);
        if (carAvailableTable.getColumnModel().getColumnCount() > 0) {
            carAvailableTable.getColumnModel().getColumn(0).setResizable(false);
            carAvailableTable.getColumnModel().getColumn(1).setResizable(false);
            carAvailableTable.getColumnModel().getColumn(2).setResizable(false);
            carAvailableTable.getColumnModel().getColumn(3).setResizable(false);
            carAvailableTable.getColumnModel().getColumn(4).setResizable(false);
            carAvailableTable.getColumnModel().getColumn(5).setResizable(false);
        }

        requestCarJButton.setText("Enter Car owner name and Click here");
        requestCarJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestCarJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        viewGraphBTN.setText("Click here to View the Cheapest Option");
        viewGraphBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGraphBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(carOwnerNameTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(225, 225, 225)
                        .addComponent(requestCarJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(viewGraphBTN)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(viewGraphBTN)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carOwnerNameTXTField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestCarJButton))
                .addGap(47, 47, 47)
                .addComponent(backJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void requestCarJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestCarJButtonActionPerformed

        
        if(carOwnerNameTXTField.getText().equals("")){
                    JOptionPane.showMessageDialog(null, "Enter the Car Owner Name and then click here");
        }
        else {
        String nameOfCarOwner = carOwnerNameTXTField.getText();
        Traveller travellerFound = null;
        int counter = 0;

        for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(organization instanceof CarOwnerOrganization){
                for(Traveller tr : organization.getTravellerDirectory().getTravellerList()){
                    if(tr.getName().equals(nameOfCarOwner)){
                        travellerFound = tr;
                        JOptionPane.showMessageDialog(null, "Car Owner exists");
                        ++counter;
                        break;
                    }
                }
            }
        }
        if(counter==1 && ((CarOwner)travellerFound).getCar()!=null){
            try{
            CarOwner co = (CarOwner)travellerFound;
            
            TravelSeeker ts = (TravelSeeker)this.userAccount.getTraveller();
            
            DistanceAndTimeCalculation datc = new DistanceAndTimeCalculation();
            int[] distanceAndTimeVaues = datc.calculateDurationAndDistance(co.getCar().getLoction(), ts.getDestinationLocation());
            
            int durationForTravel = 2*distanceAndTimeVaues[0];
            
            if(co.getCar().getCapacity()<1){
                JOptionPane.showMessageDialog(null, "Car capacity is Zero! Can't access this Car!!");
                return;
            }
            else if(durationForTravel>(ts.getCarNeededUntil()) - ts.getCarNeededFrom()){
                JOptionPane.showMessageDialog(null, "Total duration of travel for back and forth is more than the time the car is available");
                return;
            }
            else if(ts.getCarNeededFrom()<co.getFromTime()){
                JOptionPane.showMessageDialog(null, "Car is not available from the time you need it! Please modify your search");
                return;
            }
            else if(ts.getCarNeededUntil()>co.getToTime()){
                JOptionPane.showMessageDialog(null, "Car is not available until the time you need it! Please modify your search");
                return;
            }
            else{
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("TravelSeekerProcessRequestACarJPanel", new TravelSeekerProcessRequestACarJPanel(userProcessContainer, userAccount, enterprise,(CarOwner)travellerFound));
            layout.next(userProcessContainer);
            }
        }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "An error occured in calculating the time and distance from your address to the current address of the car. Kindly enter an even more specific address.");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "This Car Owner doesn't have any cars available for unlocking");
        }
        }
    }//GEN-LAST:event_requestCarJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        tsqajp.populateCarYouAreTravellingWithTable();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewGraphBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGraphBTNActionPerformed
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("FareGraphForTravelSeekerJPanel", new FareGraphForTravelSeekerJPanel(userProcessContainer, userAccount, enterprise));
            layout.next(userProcessContainer);
    }//GEN-LAST:event_viewGraphBTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable carAvailableTable;
    private javax.swing.JTextField carOwnerNameTXTField;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton requestCarJButton;
    private javax.swing.JButton viewGraphBTN;
    // End of variables declaration//GEN-END:variables

    public void populateAvailableCarList() {
        DefaultTableModel model = (DefaultTableModel) carAvailableTable.getModel();       
        model.setRowCount(0);
        String toPopulateRowOrNot = "";
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
        if(org instanceof CarOwnerOrganization){
        for(Traveller tr : org.getTravellerDirectory().getTravellerList()){ 
            CarOwner co = (CarOwner)tr;
            if((co.getCar()!=null)){
            toPopulateRowOrNot  = checkIfCarIsUnlocked(co);
            }
            else {
                toPopulateRowOrNot = "No";
            }
            if(toPopulateRowOrNot.equals("No")){
                
            }
            else{
        Object[] row = new Object[9];
        row[0] = co.getName();
        row[1] = String.valueOf(co.getCar().getLicensePlateNumber());    
        row[2] = co.getCar().getLoction();
        row[3] = co.getFromTime() + ":00";
        row[4] = co.getToTime() + ":00";
        row[5] = co.getCar().getCapacity();
                
        model.addRow(row);
            }
            }
            
        }
            }
             }
            
public String checkIfCarIsUnlocked(CarOwner co){
    String carOwnerCarIsUnlocked = null;
    int count = 0;
    int counter = 0;
    for(Organization organanization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(organanization instanceof CarOwnerOrganization){
        
        for(WorkRequest request : organanization.getWorkQueue().getWorkRequestList()){
            if(request instanceof CarUnlockWorkRequest){
                if(request.getReceiver().getTraveller().getName().equals(co.getName()) && request.getStatus().equals("Completed")){
                    carOwnerCarIsUnlocked = "No";
                    return carOwnerCarIsUnlocked;
                    
            }
            }
            counter ++;
        }
            
        if(counter == organanization.getWorkQueue().getWorkRequestList().size() && carOwnerCarIsUnlocked == null)
            carOwnerCarIsUnlocked = "Yes";
            }
            count ++;
    }
    if(count == enterprise.getOrganizationDirectory().getOrganizationList().size() && carOwnerCarIsUnlocked == null)
        carOwnerCarIsUnlocked = "Yes";
        return carOwnerCarIsUnlocked;
}
}