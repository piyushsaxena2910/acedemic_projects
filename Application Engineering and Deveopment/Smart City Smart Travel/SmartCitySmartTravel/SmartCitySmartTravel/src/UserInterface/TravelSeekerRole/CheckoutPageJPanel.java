/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelSeekerRole;

import Business.Car.Car;
import Business.CarOwner.CarOwner;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Maps.DistanceAndTimeCalculation;
import Business.Network.Network;
import Business.Organization.CarOwnerOrganization;
import Business.Organization.Organization;
import Business.Organization.TravelSeekerOrganization;
import Business.TravelSeeker.TravelSeeker;
import Business.Traveller.Traveller;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Piyush
 */
public class CheckoutPageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckoutPageJPanel
     */
    private JPanel userProcessContainer;
    private TravelSeekerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public CheckoutPageJPanel(JPanel userProcessContainer, UserAccount userAccount, TravelSeekerOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateBillBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        billJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        checkoutBTN = new javax.swing.JButton();

        generateBillBTN.setText("Click here to Generate the Bill");
        generateBillBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBillBTNActionPerformed(evt);
            }
        });

        billJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Traveller Name", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(billJTable);
        if (billJTable.getColumnModel().getColumnCount() > 0) {
            billJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        checkoutBTN.setText("Checkout");
        checkoutBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(generateBillBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(checkoutBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(generateBillBTN)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(checkoutBTN)
                .addGap(8, 8, 8)
                .addComponent(backJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void generateBillBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBillBTNActionPerformed
        generateBill();
    }//GEN-LAST:event_generateBillBTNActionPerformed

    private void checkoutBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutBTNActionPerformed
        
        Traveller tr = this.userAccount.getTraveller();
        TravelSeeker ts = (TravelSeeker)tr;
        Car car = ts.getCar();
        
        Organization travelSeekerOrgaization = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof TravelSeekerOrganization){
                travelSeekerOrgaization = organization;
                break;
            }
        }
        
        for (WorkRequest req : travelSeekerOrgaization.getWorkQueue().getWorkRequestList()){
            if(req.getReceiver()==this.userAccount){
                this.userAccount.getWorkQueue().removeWorkRequest(req);
                travelSeekerOrgaization.getWorkQueue().removeWorkRequest(req);
                break;
            }
        }
        
        Organization carOwnerOrgaization = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof CarOwnerOrganization){
                carOwnerOrgaization = organization;
                break;
            }
        }
        CarOwner carOwnerFound = null;
        
        for(Traveller travellerCarOwner : carOwnerOrgaization.getTravellerDirectory().getTravellerList()){
            CarOwner carOwner = (CarOwner)travellerCarOwner;
            try{
            
            if(carOwner.getCar()==car){
                carOwnerFound = carOwner;
                break;
            }
            }
            catch(Exception e){
                
            }
        }
        for(UserAccount userAccountCarOwner : carOwnerOrgaization.getUserAccountDirectory().getUserAccountList()){
            Traveller carOwnerTraveller = userAccountCarOwner.getTraveller();
            try{
            CarOwner carOwnerWithCar = (CarOwner)carOwnerTraveller;
            
            if(carOwnerWithCar.getCar() == car){
        for (WorkRequest req : carOwnerOrgaization.getWorkQueue().getWorkRequestList()){
            if(req.getSender()==this.userAccount){
                userAccountCarOwner.getWorkQueue().removeWorkRequest(req);
                carOwnerOrgaization.getWorkQueue().removeWorkRequest(req);
                break;
            }
        }
        
            }
        
            }catch(Exception e){
                
                }
        }
        JOptionPane.showMessageDialog(null, "Successfully Checkedout!");
    }//GEN-LAST:event_checkoutBTNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable billJTable;
    private javax.swing.JButton checkoutBTN;
    private javax.swing.JButton generateBillBTN;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void generateBill() {
        
        Traveller tr = this.userAccount.getTraveller();
        TravelSeeker ts = (TravelSeeker)tr;
        Car car = ts.getCar();
        CarOwner carOwnerFound = null;
        
        Organization carOwnerOrgaization = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof CarOwnerOrganization){
                carOwnerOrgaization = organization;
                break;
            }
        }
        for(Traveller travellerCarOwner : carOwnerOrgaization.getTravellerDirectory().getTravellerList()){
            CarOwner carOwner = (CarOwner)travellerCarOwner;
            try{
            if(carOwner.getCar()==car){
                carOwnerFound = carOwner;
            }
            }
            catch(Exception e){
                
            }
        }
        
        Organization travelSeekerOrgaization = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof TravelSeekerOrganization){
                travelSeekerOrgaization = organization;
                break;
            }
        }
        
        ArrayList<Traveller> travellerList = new ArrayList<>();
        travellerList.add(tr);
        
        for (WorkRequest req : travelSeekerOrgaization.getWorkQueue().getWorkRequestList()){
            if(req.getSender()!=null){
                    Traveller trSender = req.getSender().getTraveller();
                    TravelSeeker tsSender = (TravelSeeker)trSender;
                    
                    if(tsSender.getCar()==car){
                        travellerList.add(trSender);
                    }
        }
        }
        
        DefaultTableModel model = (DefaultTableModel) billJTable.getModel();
        model.setRowCount(0);
        Object[] row = new Object[2];
        for(Traveller traveller : travellerList){
        
        row[0] = traveller;
        row[1] = calculateFare(ts,carOwnerFound,travellerList.size());
            
        model.addRow(row);
    }
        }

    private Float calculateFare(TravelSeeker ts, CarOwner carOwner, int totalNuberOftravellers) {
        float totalFare = 0;
        DistanceAndTimeCalculation datc = new DistanceAndTimeCalculation();
        int[] distanceAndTimeVaues = datc.calculateDurationAndDistance(carOwner.getCar().getLoction(), ts.getDestinationLocation());
        int durationForTravel = 2*distanceAndTimeVaues[0];
        
        if(durationForTravel<carOwner.getRaisePriceAferHours()){
        totalFare = carOwner.getBasePricePerHour()*durationForTravel;
        }
        
        else{
            totalFare = carOwner.getBasePricePerHour() * carOwner.getRaisePriceAferHours() + 
                    (durationForTravel - carOwner.getRaisePriceAferHours()) * carOwner.getRaisedPricePerHour();
        }
        return (totalFare/totalNuberOftravellers);
    }
}
