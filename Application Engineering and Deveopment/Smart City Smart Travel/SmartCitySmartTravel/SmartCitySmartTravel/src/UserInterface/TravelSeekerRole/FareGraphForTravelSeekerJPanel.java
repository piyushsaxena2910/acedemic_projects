/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelSeekerRole;

import Business.CarOwner.CarOwner;
import Business.Enterprise.Enterprise;
import Business.Organization.CarOwnerOrganization;
import Business.Organization.Organization;
import Business.Traveller.Traveller;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Piyush
 */
public class FareGraphForTravelSeekerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FareGraphForTravelSeekerJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount userAccount;
    public FareGraphForTravelSeekerJPanel(JPanel userProcessContainer, UserAccount userAccount, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        createDataset();
        viewGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();

        backJButton.setText("<< Go Back To The List");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(backJButton)
                .addGap(171, 171, 171))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(backJButton)
                .addGap(153, 153, 153))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    private CategoryDataset createDataset(){
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(org instanceof CarOwnerOrganization){
                for(Traveller tr : org.getTravellerDirectory().getTravellerList()){
                   CarOwner co = (CarOwner)tr;
                   try{
                if(co.getBasePricePerHour() == 0 || co.getRaisePriceAferHours() == 0 || co.getRaisedPricePerHour() == 0){
                    break;
                }
                else{
                if(co.getRaisePriceAferHours()==1){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour(), String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*2 + co.getBasePricePerHour(), String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*3 + co.getBasePricePerHour(), String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*4 + co.getBasePricePerHour(), String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*5 + co.getBasePricePerHour(), String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*6 + co.getBasePricePerHour(), String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*7 + co.getBasePricePerHour(), String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==2){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour()*2, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*2 + co.getBasePricePerHour()*2, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*3 + co.getBasePricePerHour()*2, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*4 + co.getBasePricePerHour()*2, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*5 + co.getBasePricePerHour()*2, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*6 + co.getBasePricePerHour()*2, String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==3){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getBasePricePerHour()*3, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour()*3, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*2 + co.getBasePricePerHour()*3, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*3 + co.getBasePricePerHour()*3, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*4 + co.getBasePricePerHour()*3, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*5 + co.getBasePricePerHour()*3, String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==4){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getBasePricePerHour()*3, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getBasePricePerHour()*4, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour()*4, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*2 + co.getBasePricePerHour()*4, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*3 + co.getBasePricePerHour()*4, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*4 + co.getBasePricePerHour()*4, String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==5){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getBasePricePerHour()*3, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getBasePricePerHour()*4, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getBasePricePerHour()*5, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour()*5, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*2 + co.getBasePricePerHour()*5, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*3 + co.getBasePricePerHour()*5, String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==6){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getBasePricePerHour()*3, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getBasePricePerHour()*4, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getBasePricePerHour()*5, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getBasePricePerHour()*6, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour()*6, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour()*2 + co.getBasePricePerHour()*6, String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==7){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getBasePricePerHour()*3, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getBasePricePerHour()*4, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getBasePricePerHour()*5, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getBasePricePerHour()*6, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getBasePricePerHour()*7, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getRaisedPricePerHour() + co.getBasePricePerHour()*7, String.valueOf(tr), "8 Hours");
                    
                }
                
                else if(co.getRaisePriceAferHours()==8){
                    
                    dataset.addValue(co.getBasePricePerHour(), String.valueOf(tr), "1 Hour");
                    dataset.addValue(co.getBasePricePerHour()*2, String.valueOf(tr), "2 Hours");
                    dataset.addValue(co.getBasePricePerHour()*3, String.valueOf(tr), "3 Hours");
                    dataset.addValue(co.getBasePricePerHour()*4, String.valueOf(tr), "4 Hours");
                    dataset.addValue(co.getBasePricePerHour()*5, String.valueOf(tr), "5 Hours");
                    dataset.addValue(co.getBasePricePerHour()*6, String.valueOf(tr), "6 Hours");
                    dataset.addValue(co.getBasePricePerHour()*7, String.valueOf(tr), "7 Hours");
                    dataset.addValue(co.getBasePricePerHour()*8, String.valueOf(tr), "8 Hours");
                    
                }
                
                }
                }
                   catch(Exception e){
                        
                        }
                }
                
            }
        }
    return dataset;
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    // End of variables declaration//GEN-END:variables

    private void viewGraph() {
        String chartTitle = " Fares for all Cars ";
        String categoryAxisLabel = " Fare for the number of hours you select ";
        String valueAxisLabel = " Amount in $ ";

        CategoryDataset dataset = createDataset();

        JFreeChart chart = ChartFactory.createLineChart(chartTitle,
                    categoryAxisLabel, valueAxisLabel, dataset);
        chart.setBackgroundPaint(Color.YELLOW);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLUE);
        ChartFrame frame = new ChartFrame("Chart for displaying Fare for travel", chart);
        frame.setVisible(true);
        frame.setSize(900,900);
    }

}
