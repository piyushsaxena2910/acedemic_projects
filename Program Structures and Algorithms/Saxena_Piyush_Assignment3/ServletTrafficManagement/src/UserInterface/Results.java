/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import QueueUsingLinkedListImplementation.Node;
import java.util.ArrayList;
import javax.swing.JPanel;
import servlettrafficmanagement.ServletTrafficManagement;

/**
 *
 * @author Piyush
 */
public class Results extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ArrayList<Node> nodeList;
    
    public Results(JPanel userProcessContainer, ArrayList<Node> nodeList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.nodeList =  nodeList;
        totalRequestsProcessed.setText(getTotalRequestsProcessed(nodeList));
        maximumWaitingTime.setText(getMaximumWaitingTime(nodeList));
        averagWaitingTime.setText(getAverageWaitingTime(nodeList));        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalRequestsProcessed = new javax.swing.JTextField();
        maximumWaitingTime = new javax.swing.JTextField();
        averagWaitingTime = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel4.setText("Output of the Program");

        jLabel6.setText("Total Number of Work Requests Processed:");

        jLabel7.setText("Maximum amount of Time any Request spent waiting in the Servlet Queue:");

        jLabel8.setText("Average amount of Time spend by Requests in the Servlet Queue:");

        jLabel1.setText("Milli Seconds");

        jLabel2.setText("Milli Seconds");

        jLabel3.setText("Requests");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel4)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalRequestsProcessed, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(averagWaitingTime, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                        .addComponent(maximumWaitingTime)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addGap(170, 170, 170)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(totalRequestsProcessed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(maximumWaitingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(averagWaitingTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField averagWaitingTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField maximumWaitingTime;
    private javax.swing.JTextField totalRequestsProcessed;
    // End of variables declaration//GEN-END:variables

    private String getTotalRequestsProcessed(ArrayList<Node> nodeList) {
        int totalRequestsProcessed = 0;
        for(Node node : nodeList){
            if(node.isInQueue()==false){
                totalRequestsProcessed++;
            }
        }
        return String.valueOf(totalRequestsProcessed);
    }

    private String getMaximumWaitingTime(ArrayList<Node> nodeList) {
        for(Node node : nodeList){
            if(node.getEndTime()==0){
                node.setEndTime(System.currentTimeMillis());
            }
        }
        Node maxWaitingNode = nodeList.get(0);
        for(Node node : nodeList){
            if(node.getWaitTime()>maxWaitingNode.getWaitTime()){
                maxWaitingNode = node;
        }
    }
        return String.valueOf(maxWaitingNode.getWaitTime());
    }

    private String getAverageWaitingTime(ArrayList<Node> nodeList) {
        for(Node node : nodeList){
            if(node.getEndTime()==0){
                node.setEndTime(System.currentTimeMillis());
            }
        }
        long waitingTime[] = new long[nodeList.size()];
        long waitingTimeTotal = 0;
        for(int i = 0; i < nodeList.size(); i++){
            waitingTime[i] = nodeList.get(i).getWaitTime();
        }
        for(int j = 0; j < nodeList.size(); j++){
            waitingTimeTotal = waitingTimeTotal + waitingTime[j];
        }
        return String.valueOf(waitingTimeTotal/nodeList.size());
    }
}
